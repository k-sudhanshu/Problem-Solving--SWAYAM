class Solution {
public:
void vod(TreeNode* r,int d,int &mi,int &ma){
    if(r==NULL)return;
    mi=min(mi,d);
    ma=max(ma,d);
    vod(r->left,d-1,mi,ma);
    vod(r->right,d+1,mi,ma);
}
void sol(vector<vector<pair<int,int>>>&v,TreeNode* r,int d,int level,int &mi,int &ma){
    if(r==NULL)return;
    v[d-mi].push_back({level,r->val});
    int x=v[d-mi].size();
    sol(v,r->right,d+1,level+1,mi,ma);
    sol(v,r->left,d-1,level+1,mi,ma);
}
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        //calculate minimum and maximum distance 
        //size of vector array maxi-mini+1;
        
       int mini=0,maxi=0,dis=0;
        vod(root,dis,mini,maxi);
        dis=maxi-mini+1;
        vector<vector<pair<int,int>>>v(dis);
        int d=0;
        
        sol(v,root,d,0,mini,maxi);
        vector<vector<int>>ans;
        for(int i=0;i<dis;i++){
            sort(v[i].begin(),v[i].end());
            vector<int>temp;
            for(auto k:v[i]){
                temp.push_back(k.second);
            }
            ans.push_back(temp);
        }
        return ans;
        
    }
};
