
class TrieNode {
public:
    vector<TrieNode*> children;
    bool end;
    int cnt;
    
    TrieNode() {
        children = vector<TrieNode*>(26, nullptr);
        cnt = 0;
        end = false;
    }
};

class Trie {
public:
    TrieNode* root;
    
    Trie() {
        root = new TrieNode();
    }
    
    // Time Complexity: O(len(word))
    void insert(string word) {
        TrieNode* node = root;
        for (char c : word) {
            if (node->children[c - 'a'] == nullptr) {
                node->children[c - 'a'] = new TrieNode();
            }
            node = node->children[c - 'a'];
            node->cnt++;
        }
        node->end = true;
    }
    
    // Time Complexity: O(len(word))
    bool search(string word) {
        TrieNode* node = root;
        for (char c : word) {
            if (node->children[c - 'a'] == nullptr) {
                return false;
            }
            node = node->children[c - 'a'];
        }
        return node->end;
    }
    
    // Time Complexity: O(len(prefix))
    bool startsWith(string prefix) {
        TrieNode* node = root;
        for (char c : prefix) {
            if (node->children[c - 'a'] == nullptr) {
                return false;
            }
            node = node->children[c - 'a'];
        }
        return node->cnt > 0;
    }
};
