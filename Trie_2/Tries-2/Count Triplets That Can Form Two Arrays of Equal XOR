class TrieNode{
public:
    TrieNode* next[2];
    int ni,si;

    TrieNode(): ni(0),si(0){
        next[0]=NULL;
        next[1]=NULL;
    }
};

class Solution {
public:
    void addNumber(TrieNode* root, int num, int idx){
        for(int i=31;i>=0;i--){
            int bit = 1 & (num >> i) ;
            if ( root->next[bit] == NULL){
                root->next[bit] = new TrieNode();
            }
            root = root->next[bit];
        }
        root->si+= idx;
        root->ni++;
    }
    int solve(TrieNode* root, int num, int idx){
        for( int i = 31; i >= 0; i--){
            int bit = 1 & (num >> i);
            if (root->next[bit] == NULL)    return 0;
            root = root->next[bit];
        }
        return (((root->ni) * idx) - (root->si));
    }
    int countTriplets(vector<int>& arr) {
        long long res=0;
        int XOR = 0;
        TrieNode* root = new TrieNode();
        for(int i=0;i<arr.size();i++){
            addNumber(root, XOR, i);
            XOR ^= arr[i];
            res=(res+solve(root,XOR,i)) % 1000000007;
        }
        return res;
    }
};
